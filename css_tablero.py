# -*- coding: utf-8 -*-
"""CSS_Tablero.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zl_XVyDk0_14XCMbmknNjlMFstkHCDkq

# Se dan de alta las librerías a utilizar
"""

!pip install jupyter-dash

import pandas as pd
import numpy as np
import dash
import dash_html_components as html
import dash_core_components as dcc
import plotly.graph_objects as go
import plotly.express as px
from dash.dependencies import Input, Output
from jupyter_dash import JupyterDash
from plotly.graph_objects import Layout

"""# Se inicializa una variable para crear la aplicación"""

external_stylesheets = ['https://lizbethmartinezalvarado.github.io/Formato.css']

app = JupyterDash(__name__, external_stylesheets = external_stylesheets)

app.title = "Programas Internacionales (Intercambios)"
server = app.server

"""# Se carga la base de datos"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Laboratorio dash/tablero.csv', encoding ='latin1')
print(df.shape)
df.head(3)

"""# Se limpia y se formatea la base de datos"""

#df['Estatus'].unique()

#Eliminamos los registros que no tengan 'Asignado' como estatus

asignados = ['Asignada','Asignada - Pendiente registrar materias','Asignada - Pendiente enviar documentos','Asignada - Materias aprobadas',
'Asignada - Materias en aprobación','Asignada - Materias enviadas a aprobación','Asignada - Materias rechazadas (2)',
'Asignada - Documentos enviados a aprobación','Asignada - Documentos aprobados','Asignada - En espera de admisión',
'Asignada - Documentos a enviar', 'Asignada - Documentos en aprobación','Asignada - Materias rechazadas (1)',
'Asignada - Documentos rechazados','Asignada - Materias rechazadas (0)','Asignada - Documentos enviados','Asignada - Materias rechazadas ',
'Asignado']

df = df[df['Estatus'].isin(asignados)]
print(df.shape)
df.head(3)

df['1raOpcion'] = df['OportunidadesSeleccionadas'].str.split('1 - ').str[1]
df['1raOpcion'] = df['1raOpcion'].str.split(',').str[0]
print(df.shape)
df.head(3)

df['1raOpcionAsignada'] = df['OportunidadAsignada'] == df['1raOpcion']
df['1raOpcionAsignada'] = df['1raOpcionAsignada'].map({True: 'Asignado', False: 'No asignado'})
print(df.shape)
df.head(3)

df['TipoInterc'] = df['OportunidadAsignada'].str.split('-').str[1]
df['TipoInterc'] = df['TipoInterc'].str.split('-').str[0]
print(df.shape)
df.head(3)

df['TipoIntercText'] = pd.np.where(df.TipoInterc.str.contains("INT"), "Intercambio Tradicional", "Study Abroad")
print(df.shape)
df.head(3)

df['PaisDestino']=df['OportunidadAsignada'].str.split('-').str[0]
print(df.shape)
df.head(3)

#df['PeriodoAcadémico'].unique()

#-Sesion 1, -Sesion 3, -Sesion 2, EGADE, -Sesión 1, -Sesión 3, Profesional, -Sesión 2, de Excelencia,

df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace(r'(\s*\(.*?\)\s*)', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesion 1', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesion 3', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesion 2', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('EGADE', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesión 1', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesión 3', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('Profesional', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('-Sesión 2', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('de Excelencia', ' ').str.strip()
df['PeriodoAcadémico'] = df['PeriodoAcadémico'].str.replace('Verano   2018', 'Verano 2018')

df['AñoIntercambio'] = df['PeriodoAcadémico'].astype('str').str.extractall('(\d+)').unstack().fillna('').sum(axis=1)
print(df.shape)
df.head(3)

df['Periodo'] = df['PeriodoAcadémico'].str.count(' ')
print(df.shape)
df.head(3)

#df['Periodo'].unique()

#df[df['Periodo'] == 3]['PeriodoAcadémico'].unique()

#df[df['Periodo'] == 1]['PeriodoAcadémico'].unique()

#df[df['Periodo'] == 4]['PeriodoAcadémico'].unique()

df['PeriodoTexto'] = np.where(df['Periodo'] == 3, 'Semestre', 
                     np.where(df['Periodo'] == 1, 'Periodo Vacacional',
                     np.where(df['Periodo'] == 4, 'Año', 'Sin información')))
print(df.shape)
df.head(3)

# df['PeriodoTexto'].unique()

df2 = pd.read_csv('/content/drive/MyDrive/Laboratorio dash/Programas_Tec.xlsx - Programas Tec.csv')
print(df2.shape)
df2.head(3)

df = df.merge(df2, how = 'inner', left_on = 'Programa', right_on = 'Clave')
print(df.shape)
df.head(3)

df3 = pd.read_csv('/content/drive/MyDrive/Laboratorio dash/Regiones_Campus.csv')
print(df3.shape)
df3.head(3)

df = df.merge(df3, how = 'inner', left_on = 'Campus', right_on = 'Campus')
print(df.shape)
df.head(3)

#df.columns

df = df.drop(['Nombre', 'Ap Paterno', 'Ap Materno', 'Correo Alterno', 'Celular', 'Periodo Solicitud', 'OportunidadesAprobadas', 'Estatus', 'PeriodoAcadémico', 
              'Actividad Actual', 'Fecha', 'TipoInterc', 'Periodo', 'Clave'], axis = 1)
print(df.shape)
df.head(3)

#df.isna().sum()

df[['Campus', 'OportunidadAsignada', 'CampusAdministrador', '1raOpcion', 'PaisDestino']] = df[['Campus', 'OportunidadAsignada', 'CampusAdministrador', '1raOpcion', 'PaisDestino']].fillna('Sin información')
df = df.dropna()
print(df.shape)
df.head(3)

df['AñoIntercambio'] = df['AñoIntercambio'].astype('str').str[:4].astype('datetime64').dt.year
print(df.shape)
df.head(3)

"""# Se crean gráficos preliminares"""

# print(df.columns)
# print(df.shape)
# df.head(3)

# region = list(df['Region'].unique())
# region.sort()
# valores_region = list(df['Region'].value_counts().sort_index())
# colorest = ['rgb(107, 174, 214)', 'rgb(49, 130, 189)', 'rgb(239, 243, 255)', 'rgb(8, 106, 168)', 'rgb(189, 215, 231)']

# data = {'Región': region, 'Intercambios': valores_region, 'Color': colorest}
# df_tabla = pd.DataFrame(data)
# # df_tabla

# fuentes = ['Arial']
# colores = ['rgb(25,25,25)', 'rgb(255, 255, 255)']

# fig5 = go.Figure(data = [go.Table(
#     header = dict(
#         values=["Región", "<b>Número de intercambios</b>"],
#         line_color = colores[1], fill_color = colores[1],
#         align = 'center', font = dict(family = fuentes[0], color = colores[0], size = 18)),
#         cells = dict(
#             values = [df_tabla.Región, df_tabla.Intercambios],
#             line_color = [df_tabla['Color']], fill_color = [df_tabla['Color']],
#             align = 'center', font = dict(family = fuentes[0], color = colores[0], size = 13)))
# ])

# fig5.update_layout(paper_bgcolor = colores[0], #Color del background
#                   title_text = 'Número de intercambios por región', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 25) #Formato del título

# fig5.show()

# estado = list(df['Estado'].unique())
# estado.sort()
# valores_estado = list(df['Estado'].value_counts().sort_index())

# datam = {'Estado': estado, 'Intercambios': valores_estado}
# df_map = pd.DataFrame(datam)
# df_map

# fuentes = ['Arial']
# colores = ['rgb(25,25,25)', 'rgb(255, 255, 255)']

# import requests
# repo_url = 'https://raw.githubusercontent.com/angelnmara/geojson/master/mexicoHigh.json' 
# mx_regions_geo = requests.get(repo_url).json() #Archivo GeoJSON

# fig6 = px.choropleth(data_frame = df_map, 
#                      geojson = mx_regions_geo, 
#                      locations = 'Estado', # nombre de la columna del Dataframe
#                      featureidkey = 'properties.name',  # ruta al campo del archivo GeoJSON con el que se hará la relación (nombre de los estados)
#                      color = 'Intercambios', #El color depende de las cantidades
#                      color_continuous_scale = "gnbu")

# fig6.update_layout(paper_bgcolor = colores[0], #Color del background
#                   title_text = 'Número de intercambios por Entidad Federativa', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig6.update_coloraxes(colorbar_tickfont_color = colores[1], colorbar_tickfont_family = fuentes[0], colorbar_tickfont_size = 15,
#                       colorbar_title_font = dict(color = colores[1], family = fuentes[0], size = 17))

# fig6.update_geos(showcountries = True, showcoastlines = True, showland = True, fitbounds = "locations")

# fig6.show()

# asignacion = list(df['1raOpcionAsignada'].unique())
# valores_asignacion = list(df['1raOpcionAsignada'].value_counts())

# colores_grafica = ['rgb(0, 255, 255)', 'rgb(80, 80, 80)']
# fuentes = ['Arial']
# colores = ['rgb(25,25,25)', 'rgb(255, 255, 255)']

# fig1 = go.Figure(data = [go.Pie(labels = asignacion, values = valores_asignacion, hole = 0.5,
#                           marker_colors = colores_grafica)])

# fig1.update_traces(textinfo = 'percent', textfont_family= fuentes[0], textfont_size = 20) #Formato de texto dentro de la gráfica

# fig1.update_layout(paper_bgcolor = colores[0], #Color del background
#                   title_text = 'Alumnos asignados a su primera opción', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   legend_font_color = colores[1], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig1.show()

# años = list(df['AñoIntercambio'].unique())
# años.sort()
# valores_añointint = [0] + list(df[df['TipoIntercText'] == 'Intercambio Tradicional']['AñoIntercambio'].value_counts().sort_index())
# valores_añostab = list(df[df['TipoIntercText'] == 'Study Abroad']['AñoIntercambio'].value_counts().sort_index())

# colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(25,25,25)']
# fuentes = ['Arial']

# fig2 = go.Figure()

# fig2.add_trace(go.Scatter(x = años, y = valores_añointint, name = 'Intercambio internacional', mode = 'lines+markers', line = dict(color = colores[0], width = 4)))
# fig2.add_trace(go.Scatter(x = años, y = valores_añostab, name = 'Study Abroad', mode = 'lines+markers', line = dict(color = colores[1], width = 4)))

# fig2.update_xaxes(title_text = "Año", showgrid = False, title_font = dict(size = 20, family = fuentes[0], color = colores[2]), tickfont = dict(family = fuentes[0], color = colores[2], size = 15))
# fig2.update_yaxes(title_text = "Número de estudiantes", showgrid = True, title_font = dict(size = 20, family = fuentes[0], color = colores[2]), tickfont = dict(family = fuentes[0], color = colores[2], size = 15))

# fig2.update_layout(paper_bgcolor = colores[3], #Color del background,
#                   plot_bgcolor = colores[3],
#                   title_text = 'Intercambios por tipo (2014 - 2022)', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   legend_font_color = colores[2], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig2.show()

# categoria = ['Tipo de intercambio']
# tipointerc = list(df['TipoIntercText'].unique())
# intercambio = list(df[df['TipoIntercText'] == 'Intercambio Tradicional']['TipoIntercText'].value_counts())
# studyabroad = list(df[df['TipoIntercText'] == 'Study Abroad']['TipoIntercText'].value_counts())
# percent_intercambio = [str(x) + '%' for x in np.round(np.multiply(intercambio, 100) / np.add(intercambio, studyabroad),2)]
# percent_studyabroad = [str(x) + '%' for x in np.round(np.multiply(studyabroad, 100) / np.add(intercambio, studyabroad),2)]

# # print(categoria)
# # print(tipointerc)
# # print(percent_intercambio)
# # print(percent_studyabroad)
# # print(df['TipoIntercText'].value_counts())

# colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(25,25,25)']
# fuentes = ['Arial']

# fig3 = go.Figure(data=[go.Bar(name = tipointerc[0], x = categoria, y = intercambio, text = percent_intercambio, textposition = 'inside', marker_color = colores[0]),
#                       go.Bar(name = tipointerc[1], x = categoria, y = studyabroad, text = percent_studyabroad, textposition = 'inside', marker_color = colores[1])])

# fig3.update_traces(hoverinfo = 'name+y')

# fig3.update_xaxes(visible = False, showticklabels = False)
# fig3.update_yaxes(visible = False, showticklabels = False)

# fig3.update_layout(paper_bgcolor = colores[3], #Color del background,
#                   plot_bgcolor = colores[3],
#                   title_text = 'Porentaje del total por tipo de intercambio', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   legend_font_color = colores[2], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig3.update_layout(barmode='stack')
# fig3.show()

# niveles = list(df['Nivel'].unique())
# valores_niveles = list(df['Nivel'].value_counts())
# niveles[1], niveles[2] = niveles[2], niveles[1]

# colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(25,25,25)']
# fuentes = ['Arial']

# fig4 = go.Figure(go.Bar(x = valores_niveles, y = niveles, orientation = 'h', marker_color = colores[0]))

# fig4.update_xaxes(tickfont = dict(family = fuentes[0], color = colores[2], size = 15))
# fig4.update_yaxes(tickfont = dict(family = fuentes[0], color = colores[2], size = 15))

# fig4.update_layout(paper_bgcolor = colores[3], #Color del background,
#                   plot_bgcolor = colores[3],
#                   title_text = 'Intercambios por niveles', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig4.show()

# import warnings
# warnings.filterwarnings('ignore')

# df_parcats = df[['Escuela', 'PeriodoTexto', 'TipoIntercText']]
# df_parcats.Escuela = df_parcats.Escuela.astype('category').cat.codes
# df_parcats.PeriodoTexto = df_parcats.PeriodoTexto.astype('category').cat.codes
# df_parcats.TipoIntercText = df_parcats.TipoIntercText.astype('category').cat.codes

# num_escuela = list(df_parcats.Escuela.unique())
# escuela = list(df.Escuela.unique())

# num_periodo = list(df_parcats.PeriodoTexto.unique())
# periodo = list(df.PeriodoTexto.unique())

# num_tipointerc = list(df_parcats.TipoIntercText.unique())
# tipointerc = list(df.TipoIntercText.unique())

# escuela_dim = go.parcats.Dimension(values = df_parcats.Escuela, label = 'Escuela', categoryarray = num_escuela, ticktext = escuela)
# periodo_dim = go.parcats.Dimension(values = df_parcats.PeriodoTexto, label = 'Periodo', categoryarray = num_periodo, ticktext = periodo)
# tipointerc_dim = go.parcats.Dimension(values = df_parcats.TipoIntercText, label = 'Tipo de intercambio', categoryarray = num_tipointerc, ticktext = tipointerc)

# color = df_parcats.TipoIntercText

# fig5 = go.Figure(data = [go.Parcats(dimensions = [escuela_dim, periodo_dim, tipointerc_dim],
#         line={'color': color},
#         labelfont={'size': 15, 'family': 'Arial', 'color': 'rgb(255, 255, 255)'},
#         tickfont={'size': 12, 'family': 'Arial', 'color': 'rgb(255, 255, 255)'},
#         arrangement='freeform')])

# colores = ['rgb(255, 255, 255)', 'rgb(25,25,25)']
# fuentes = ['Arial']

# fig5.update_layout(paper_bgcolor = colores[1], #Color del background,
#                   title_text = 'Estudiantes por escuela, periodo y tipo de intercambio', title_x = 0.5, #Título y posición del título
#                   title_font_color = colores[0], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
#                   hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

# fig5.show()

"""# Se genera el contenido que se tendrá en la aplicación web

## Se crean los filtros del tablero
"""

filtroaño = dcc.RangeSlider(df['AñoIntercambio'].unique().min(), df['AñoIntercambio'].unique().max(), 1,
                            marks = {str(año): {'label': str(año),
                                        'style': {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 15},}            
                                    for año in df['AñoIntercambio'].unique()}, 
                            value = [2014, 2022])

filtroniveles = dcc.Checklist(list(df['Nivel'].unique()), 
                              ['Profesional', 'Maestría', 'Preparatoria', 'Doctorado', 'Especialidad'],
                              style = {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 15})

filtrocampus = dcc.Dropdown(options = [{'label': 'Todos los campus', 'value': 'all_campus'}]+
                            [{'label': x, 'value': x} for x in df['Campus'].unique()],
                            value = 'Monterrey',
                            multi = True,
                            placeholder = "Seleccionar un campus",
                            style = {'color': 'rgb(25,25,25)', 'font-family': 'Arial', 'font-size': 15})

filtroescuela = dcc.Dropdown(options = [{'label': 'Todas las escuelas', 'value': 'all_escuelas'}]+
                             [{'label': x, 'value': x} for x in df['Escuela'].unique()],
                             value = 'Ingeniería y Ciencias',
                             multi = True,
                             placeholder = 'Seleccionar una escuela',
                             style = {'color': 'rgb(25,25,25)', 'font-family': 'Arial', 'font-size': 15})

"""## Se prepara el layout del tablero"""

colors = {'background': 'rgb(50, 50, 50)'}

# Layout, títulos de la app
app.layout = html.Div(style = {'backgroundColor': colors['background']}, children = [
    html.Div(children = [
    html.H3(children = 'Programas Internacionales (Intercambios)'),
    html.H6('Información de alumnos con estatus asignado, de 2014 a 2022', style = {'marginTop': '-15px', 'marginBottom': '30px'})
    ], style = {'textAlign': 'center', 'padding': '2rem', 'boxShadow': '#888888 5px 5px 5px', 'color': 'rgb(255,255,255)'}),

# Filtros de la app
    html.Div(children = [
    html.Label('Año', style = {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 20}), 
    filtroaño,

    html.Br(),
    html.Label('Campus de origen', style = {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 20}),
    filtrocampus,

    html.Br(),
    html.Label('Niveles', style = {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 20}),
    filtroniveles,

    html.Br(),
    html.Label('Escuela', style = {'color': 'rgb(255, 255, 255)', 'font-family': 'Arial', 'font-size': 20}),
    filtroescuela
    ], className = 'four columns',
    style = {'padding': '2rem', 'margin': '0.5rem', 'marginTop': '1.5rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'} ),

# Gráficos de la app
    html.Div(children = [
    dcc.Graph(id = 'holepiegraph')], className = 'four columns',
            style = {'padding': '1rem', 'margin': '1.8rem', 'marginTop': '1.5rem', 'marginBottom': '1rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),

    html.Div(children = [       
    dcc.Graph(id = 'bargraph')], className = 'four columns',
            style = {'padding': '1rem', 'margin': '0.5rem', 'marginTop': '1.5rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),

    html.Div(children = [
        dcc.Graph(id = 'horizbgraph')], className = 'six columns',
        style = {'padding': '1rem', 'margin':'1.6rem', 'marginTop': '1rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),

    html.Div(children = [    
        dcc.Graph(id = 'scattergraph')], className = 'six columns',
        style = {'padding': '1rem', 'margin':'1rem', 'marginTop': '1rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),        

    html.Div(children=[
        dcc.Graph(id = 'pipegraph')], className = "twelve columns", 
        style = {'padding':'2rem', 'margin':'2.7rem', 'marginTop':'0.5rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),

            html.Div(children = [       
        dcc.Graph(id = 'tbgraph')], className = 'four columns',
        style = {'padding': '1rem', 'margin': '.5rem', 'marginTop': '0rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'}),

    html.Div(children = [       
        dcc.Graph(id = 'mapgraph')], className = 'eight columns',
        style = {'padding': '1rem', 'margin': '1rem', 'marginTop': '0rem', 'boxShadow': '#888888 5px 10px 8px', 'border-radius': '10px', 'backgroundColor': 'rgb(50, 50, 50)'})
])


#### Callbacks

@app.callback(
    Output('holepiegraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtrocampus, 'value'),
    Input(filtroniveles, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_year, selected_campus, selected_level, selected_school):
  
    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]

    if selected_campus == ['all_campus']:
      dff = dff
    else:
      dff = dff[dff.Campus.isin(selected_campus)]

    dff = dff[dff['Nivel'].isin(selected_level)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]

    asignacion = list(dff['1raOpcionAsignada'].unique())
    valores_asignacion = list(dff['1raOpcionAsignada'].value_counts())

    colores_grafica = ['rgb(0, 255, 255)', 'rgb(120, 120, 120)']
    fuentes = ['Arial']
    colores = ['rgb(50, 50, 50)', 'rgb(255, 255, 255)']

    fig1 = go.Figure(data = [go.Pie(labels = asignacion, values = valores_asignacion, hole = 0.5,
                                  marker_colors = colores_grafica)])  
  
    fig1.update_traces(textinfo = 'percent', textfont_family= fuentes[0], textfont_size = 15) #Formato de texto dentro de la gráfica

    fig1.update_layout(paper_bgcolor = colores[0], #Color del background
                      title_text = 'Alumnos asignados a su primera opción', title_x = 0.5, #Título y posición del título
                      title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 20, #Formato del título
                      legend_font_color = colores[1], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
                      hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

    fig1.update_layout(legend = dict(orientation = 'h', yanchor = 'bottom', y = 1.02, xanchor = 'right', x = 1))

    return fig1


@app.callback(
    Output('bargraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtrocampus, 'value'),
    Input(filtroniveles, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_year, selected_campus, selected_level, selected_school):
  
    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]

    if selected_campus == ['all_campus']:
      dff = dff
    else:
      dff = dff[dff.Campus.isin(selected_campus)]

    dff = dff[dff['Nivel'].isin(selected_level)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]
    
    categoria = ['Tipo de intercambio']
    tipointerc = list(dff['TipoIntercText'].unique())
    intercambio = list(dff[dff['TipoIntercText'] == 'Intercambio Tradicional']['TipoIntercText'].value_counts())
    studyabroad = list(dff[dff['TipoIntercText'] == 'Study Abroad']['TipoIntercText'].value_counts())
    percent_intercambio = [str(x) + '%' for x in np.round(np.multiply(intercambio, 100) / np.add(intercambio, studyabroad),2)]
    percent_studyabroad = [str(x) + '%' for x in np.round(np.multiply(studyabroad, 100) / np.add(intercambio, studyabroad),2)]

    colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(50, 50, 50)']
    fuentes = ['Arial']

    fig3 = go.Figure(data=[go.Bar(name = tipointerc[0], x = categoria, y = intercambio, text = percent_intercambio, textposition = 'inside', textfont_family = fuentes[0], textfont_size = 15, marker_color = colores[0]),
                           go.Bar(name = tipointerc[1], x = categoria, y = studyabroad, text = percent_studyabroad, textposition = 'inside', textfont_family = fuentes[0], textfont_size = 15, marker_color = colores[1])])

    fig3.update_traces(hoverinfo = 'name+y')

    fig3.update_xaxes(visible = False, showticklabels = False)
    fig3.update_yaxes(visible = False, showticklabels = False)

    fig3.update_layout(paper_bgcolor = colores[3], #Color del background,
                  plot_bgcolor = colores[3],
                  title_text = 'Porentaje del total por tipo de intercambio', title_x = 0.5, #Título y posición del título
                  title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 20, #Formato del título
                  legend_font_color = colores[2], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
                  hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

    fig3.update_layout(barmode = 'stack')

    return fig3


@app.callback(
    Output('scattergraph', 'figure'), 
    Input(filtrocampus, 'value'),
    Input(filtroniveles, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_campus, selected_level, selected_school):

    if selected_campus == ['all_campus']:
      dff = df
    else:
      dff = df[df.Campus.isin(selected_campus)]

    dff = dff[dff['Nivel'].isin(selected_level)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]

    años = list(dff['AñoIntercambio'].unique())
    años.sort()
    valores_añointint = [0] + list(dff[dff['TipoIntercText'] == 'Intercambio Tradicional']['AñoIntercambio'].value_counts().sort_index())
    valores_añostab = list(dff[dff['TipoIntercText'] == 'Study Abroad']['AñoIntercambio'].value_counts().sort_index())

    colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(50, 50, 50)']
    fuentes = ['Arial']

    fig2 = go.Figure()

    fig2.add_trace(go.Scatter(x = años, y = valores_añointint, name = 'Intercambio internacional', mode = 'lines+markers', line = dict(color = colores[0], width = 4)))
    fig2.add_trace(go.Scatter(x = años, y = valores_añostab, name = 'Study Abroad', mode = 'lines+markers', line = dict(color = colores[1], width = 4)))

    fig2.update_xaxes(title_text = "Año", showgrid = False, title_font = dict(size = 20, family = fuentes[0], color = colores[2]), tickfont = dict(family = fuentes[0], color = colores[2], size = 15))
    fig2.update_yaxes(title_text = "Número de estudiantes", showgrid = True, title_font = dict(size = 20, family = fuentes[0], color = colores[2]), tickfont = dict(family = fuentes[0], color = colores[2], size = 15))

    fig2.update_layout(paper_bgcolor = colores[3], #Color del background,
                  plot_bgcolor = colores[3],
                  title_text = 'Intercambios por tipo (2014 - 2022)', title_x = 0.5, #Título y posición del título
                  title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 20, #Formato del título
                  legend_font_color = colores[2], legend_font_family = fuentes[0], legend_font_size = 15, #Formatro de las leyendas
                  hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

    fig2.update_layout(legend = dict(orientation = 'h', yanchor = 'bottom', y = 1.02, xanchor = 'right', x = 1))

    return fig2


@app.callback(
    Output('horizbgraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtrocampus, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_year, selected_campus, selected_school):

    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]
    
    if selected_campus == ['all_campus']:
      dff = dff
    else:
      dff = dff[dff.Campus.isin(selected_campus)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]

    niveles = list(dff['Nivel'].unique())
    niveles.sort()
    valores_niveles = list(dff['Nivel'].value_counts().sort_index())

    colores = ['rgb(0, 255, 255)', 'rgb(0, 200, 255)', 'rgb(255, 255, 255)', 'rgb(50, 50, 50)']
    fuentes = ['Arial']

    fig4 = go.Figure(go.Bar(x = valores_niveles, y = niveles, orientation = 'h', marker_color = colores[0]))

    fig4.update_xaxes(tickfont = dict(family = fuentes[0], color = colores[2], size = 15))
    fig4.update_yaxes(tickfont = dict(family = fuentes[0], color = colores[2], size = 15))

    fig4.update_layout(paper_bgcolor = colores[3], #Color del background,
                  plot_bgcolor = colores[3],
                  title_text = 'Intercambios por niveles', title_x = 0.5, #Título y posición del título
                  title_font_color = colores[2], title_font_family = fuentes[0], title_font_size = 20, #Formato del título
                  hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

    return fig4


@app.callback(
    Output('tbgraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtroniveles, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_year, selected_level, selected_school):
  
    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]

    dff = dff[dff['Nivel'].isin(selected_level)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]

    region = list(dff['Region'].unique())
    region.sort()
    valores_region = list(dff['Region'].value_counts().sort_index())
    colorest = ['rgb(107, 174, 214)', 'rgb(49, 130, 189)', 'rgb(239, 243, 255)', 'rgb(8, 106, 168)', 'rgb(189, 215, 231)']

    data = {'Región': region, 'Intercambios': valores_region, 'Color': colorest}
    df_tabla = pd.DataFrame(data)

    fuentes = ['Arial']
    colores = ['rgb(50, 50, 50)', 'rgb(255, 255, 255)']

    fig5 = go.Figure(data = [go.Table(
        header = dict(
            values=["Región", "<b>Número de intercambios</b>"],
            line_color = colores[1], fill_color = colores[1],
            align = 'center', font = dict(family = fuentes[0], color = colores[0], size = 18)),
            cells = dict(
                values = [df_tabla.Región, df_tabla.Intercambios],
                line_color = [df_tabla['Color']], fill_color = [df_tabla['Color']],
                align = 'center', font = dict(family = fuentes[0], color = colores[0], size = 13)))
    ])

    fig5.update_layout(paper_bgcolor = colores[0], #Color del background
                      title_text = 'Número de intercambios por región', title_x = 0.5, #Título y posición del título
                      title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 25) #Formato del título
    return fig5


@app.callback(
    Output('mapgraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtroniveles, 'value'),
    Input(filtroescuela, 'value'))

def update_figure(selected_year, selected_level, selected_school):
  
    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]

    dff = dff[dff['Nivel'].isin(selected_level)]

    if selected_school == ['all_escuelas']:
      dff = dff
    else:
      dff = dff[dff.Escuela.isin(selected_school)]

    estado = list(dff['Estado'].unique())
    estado.sort()
    valores_estado = list(dff['Estado'].value_counts().sort_index())

    datam = {'Estado': estado, 'Intercambios': valores_estado}
    df_map = pd.DataFrame(datam)

    fuentes = ['Arial']
    colores = ['rgb(50, 50, 50)', 'rgb(255, 255, 255)']

    import requests
    repo_url = 'https://raw.githubusercontent.com/angelnmara/geojson/master/mexicoHigh.json' 
    mx_regions_geo = requests.get(repo_url).json() #Archivo GeoJSON

    fig6 = px.choropleth(data_frame = df_map, 
                        geojson = mx_regions_geo, 
                        locations = 'Estado', # nombre de la columna del Dataframe
                        featureidkey = 'properties.name',  # ruta al campo del archivo GeoJSON con el que se hará la relación (nombre de los estados)
                        color = 'Intercambios', #El color depende de las cantidades
                        color_continuous_scale = "gnbu")

    fig6.update_layout(paper_bgcolor = colores[0], #Color del background
                      title_text = 'Número de intercambios por Entidad Federativa', title_x = 0.5, #Título y posición del título
                      title_font_color = colores[1], title_font_family = fuentes[0], title_font_size = 25, #Formato del título
                      hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15) #Formato de la descripción emergente

    fig6.update_coloraxes(colorbar_tickfont_color = colores[1], colorbar_tickfont_family = fuentes[0], colorbar_tickfont_size = 15,
                          colorbar_title_font = dict(color = colores[1], family = fuentes[0], size = 17))

    fig6.update_geos(showcountries = True, showcoastlines = True, showland = True, fitbounds = "locations")

    return fig6


@app.callback(
    Output('pipegraph', 'figure'), 
    Input(filtroaño, 'value'),
    Input(filtrocampus, 'value'),
    Input(filtroniveles, 'value'))

def update_figure(selected_year, selected_campus, selected_level):

    dff = df[(df['AñoIntercambio'] >= selected_year[0]) & (df['AñoIntercambio'] <= selected_year[1])]

    if selected_campus == ['all_campus']:
      dff = dff
    else:
      dff = dff[dff.Campus.isin(selected_campus)]

    dff = dff[dff['Nivel'].isin(selected_level)]

    import warnings
    warnings.filterwarnings('ignore')

    df_parcats = dff[['Escuela', 'PeriodoTexto', 'TipoIntercText']]
    df_parcats.Escuela = df_parcats.Escuela.astype('category').cat.codes
    df_parcats.PeriodoTexto = df_parcats.PeriodoTexto.astype('category').cat.codes
    df_parcats.TipoIntercText = df_parcats.TipoIntercText.astype('category').cat.codes

    num_escuela = list(df_parcats.Escuela.unique())
    escuela = list(df.Escuela.unique())

    num_periodo = list(df_parcats.PeriodoTexto.unique())
    periodo = list(df.PeriodoTexto.unique())

    num_tipointerc = list(df_parcats.TipoIntercText.unique())
    tipointerc = list(df.TipoIntercText.unique())

    escuela_dim = go.parcats.Dimension(values = df_parcats.Escuela, label = 'Escuela', categoryarray = num_escuela, ticktext = escuela)
    periodo_dim = go.parcats.Dimension(values = df_parcats.PeriodoTexto, label = 'Periodo', categoryarray = num_periodo, ticktext = periodo)
    tipointerc_dim = go.parcats.Dimension(values = df_parcats.TipoIntercText, label = 'Tipo de intercambio', categoryarray = num_tipointerc, ticktext = tipointerc)

    color = df_parcats.Escuela

    fig5 = go.Figure(data = [go.Parcats(dimensions = [escuela_dim, periodo_dim, tipointerc_dim],
        line={'color': color, 'colorscale': 'gnbu'},
        labelfont={'size': 15, 'family': 'Arial', 'color': 'rgb(255, 255, 255)'},
        tickfont={'size': 12, 'family': 'Arial', 'color': 'rgb(255, 255, 255)'},
        arrangement='freeform')])

    colores = ['rgb(255, 255, 255)', 'rgb(50, 50, 50)']
    fuentes = ['Arial']

    fig5.update_layout(paper_bgcolor = colores[1], #Color del background,
                  title_text = 'Estudiantes por escuela, periodo y tipo de intercambio', title_x = 0.5, #Título y posición del título
                  title_font_color = colores[0], title_font_family = fuentes[0], title_font_size = 20, #Formato del título
                  hoverlabel_font_family = fuentes[0], hoverlabel_font_size = 15, #Formato de la descripción emergente
                  margin = dict(l = 125, r = 125)) #Formato de la descripción emergente

    return fig5


if __name__ == '__main__':
    app.run_server(debug = True, dev_tools_ui = False, dev_tools_props_check = False)